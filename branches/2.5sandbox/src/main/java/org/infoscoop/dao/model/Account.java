package org.infoscoop.dao.model;

// Generated 2010/03/29 15:54:59 by Hibernate Tools 3.3.0.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.apache.commons.codec.binary.Base64;
import org.infoscoop.account.IAccount;

/**
 * IsAccounts generated by hbm2java
 */
@Entity
@Table(name = "is_accounts", uniqueConstraints = @UniqueConstraint(columnNames = "uid"))
public class Account implements java.io.Serializable,IAccount {

	private Integer id;
	private String uid;
	private String name;
	private String password;

	public Account() {
	}

	public Account(String uid) {
		this.uid = uid;
	}

	public Account(String uid, String name, String password) {
		this.uid = uid;
		this.name = name;
		this.password = password;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "uid", unique = true, nullable = false, length = 150)
	public String getUid() {
		return this.uid;
	}

	public void setUid(String uid) {
		this.uid = uid;
	}

	@Column(name = "name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "password")
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public void setPasswordPlainText(String plainTextPassword) {
		try {
			MessageDigest digest = MessageDigest.getInstance("SHA");
			this.password = new String(Base64.encodeBase64(digest
					.digest(plainTextPassword.getBytes("iso-8859-1"))));
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
	}

	@Transient
	public String getGroupName() {
		return null;
	}
	@Transient
	public String getMail() {
		return null;
	}
}
