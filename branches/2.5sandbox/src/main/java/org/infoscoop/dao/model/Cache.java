package org.infoscoop.dao.model;

// Generated 2010/03/29 15:54:59 by Hibernate Tools 3.3.0.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.Version;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.httpclient.Header;
import org.infoscoop.util.XmlUtil;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * IsCaches generated by hbm2java
 */
@Entity
@Table(name = "is_caches")
public class Cache implements java.io.Serializable {

	private Integer id;
	private Date timestamp;
	private String uid;
	private String url;
	private String urlKey;
	private String headers;
	private String body;

	public Cache() {
	}

	public Cache(String uid, String url, String urlKey, String headers,
			String body) {
		this.uid = uid;
		this.url = url;
		this.urlKey = urlKey;
		this.headers = headers;
		this.body = body;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Version
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "timestamp", nullable = false, length = 19)
	public Date getTimestamp() {
		return this.timestamp;
	}

	public void setTimestamp(Date timestamp) {
		this.timestamp = timestamp;
	}

	@Column(name = "UID", nullable = false, length = 150)
	public String getUid() {
		return this.uid;
	}

	public void setUid(String uid) {
		this.uid = uid;
	}

	@Column(name = "url", nullable = false, length = 1024)
	public String getUrl() {
		return this.url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	@Column(name = "url_key", nullable = false, length = 256)
	public String getUrlKey() {
		return this.urlKey;
	}

	public void setUrlKey(String urlKey) {
		this.urlKey = urlKey;
	}

	@Column(name = "headers", nullable = false, length = 65535)
	public String getHeaders() {
		return this.headers;
	}

	public void setHeaders(String headers) {
		this.headers = headers;
	}

	@Column(name = "body", nullable = false, length = 65535)
	public String getBody() {
		return this.body;
	}

	public void setBody(String body) {
		this.body = body;
	}

	
	@Transient
	public byte[] getBodyBytes() {
		return Base64.decodeBase64(getBody().getBytes());
	}

	public void setBodyBytes(byte[] bytes) {
		setBody(new String(Base64.encodeBase64(bytes)));
	}

	@Transient
	public List<Header> getHeaderList() throws SAXException {
		List<Header> headers = new ArrayList<Header>();
		
		Document headerDoc = (Document) XmlUtil.string2Dom(getHeaders());
		Element headerEl = headerDoc.getDocumentElement();
		NodeList list = headerEl.getElementsByTagName("header");
		
		for(int i=0;i<list.getLength();i++){
			Element header = (Element)list.item(i);
			headers.add(new Header(header.getAttribute("name"), header.getAttribute("value")));
		}
		
		return headers;
	}
}
