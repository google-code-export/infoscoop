package org.infoscoop.dao.model;

// Generated 2010/03/29 15:54:59 by Hibernate Tools 3.3.0.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.io.InputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerFactoryConfigurationError;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.apache.commons.logging.LogFactory;
import org.infoscoop.util.XmlUtil;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 * IsTablayouts generated by hbm2java
 */
@Entity
@Table(name = "is_tablayouts", uniqueConstraints = @UniqueConstraint(columnNames = {
		"tabId", "roleOrder", "temp" }))
public class TabLayout implements java.io.Serializable {
	private static org.apache.commons.logging.Log log = LogFactory.getLog(TabLayout.class);

	private Integer id;
	private String tabId;
	private int roleOrder;
	private String role;
	private String rolename;
	private String principalType;
	private String defaultUid;
	private String widgets;
	private String layout;
	private String widgetsLastmodified;
	private Integer tabNumber;
	private int deleteFlag;
	private boolean temp;
	private String workingUid;

	public TabLayout() {
	}

	public TabLayout(String tabId, int roleOrder, String role,
			String rolename, String widgets, int deleteFlag, boolean temp) {
		this.tabId = tabId;
		this.roleOrder = roleOrder;
		this.role = role;
		this.rolename = rolename;
		this.widgets = widgets;
		this.deleteFlag = deleteFlag;
		this.temp = temp;
	}

	public TabLayout(String tabId, int roleOrder, String role,
			String rolename, String principalType, String defaultUid,
			String widgets, String layout, String widgetsLastmodified,
			Integer tabNumber, int deleteFlag, boolean temp, String workingUid) {
		this.tabId = tabId;
		this.roleOrder = roleOrder;
		this.role = role;
		this.rolename = rolename;
		this.principalType = principalType;
		this.defaultUid = defaultUid;
		this.widgets = widgets;
		this.layout = layout;
		this.widgetsLastmodified = widgetsLastmodified;
		this.tabNumber = tabNumber;
		this.deleteFlag = deleteFlag;
		this.temp = temp;
		this.workingUid = workingUid;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "tabId", nullable = false, length = 50)
	public String getTabId() {
		return this.tabId;
	}

	public void setTabId(String tabId) {
		this.tabId = tabId;
	}

	@Column(name = "roleOrder", nullable = false)
	public int getRoleOrder() {
		return this.roleOrder;
	}

	public void setRoleOrder(int roleOrder) {
		this.roleOrder = roleOrder;
	}

	@Column(name = "role", nullable = false, length = 65535)
	public String getRole() {
		return this.role;
	}

	public void setRole(String role) {
		this.role = role;
	}

	@Column(name = "rolename", nullable = false, length = 256)
	public String getRolename() {
		return this.rolename;
	}

	public void setRolename(String rolename) {
		this.rolename = rolename;
	}

	@Column(name = "principalType", length = 50)
	public String getPrincipalType() {
		return this.principalType;
	}

	public void setPrincipalType(String principalType) {
		this.principalType = principalType;
	}

	@Column(name = "defaultUid", length = 150)
	public String getDefaultUid() {
		return this.defaultUid;
	}

	public void setDefaultUid(String defaultUid) {
		this.defaultUid = defaultUid;
	}

	@Column(name = "widgets", nullable = false, length = 65535)
	public String getWidgets() {
		return this.widgets;
	}

//	public void setWidgets(String widgets) {
//		this.widgets = widgets;
//	}

	@Column(name = "layout", length = 65535)
	public String getLayout() {
		return this.layout;
	}

	public void setLayout(String layout) {
		this.layout = layout;
	}

	@Column(name = "widgetsLastmodified", length = 24)
	public String getWidgetsLastmodified() {
		return this.widgetsLastmodified;
	}

	public void setWidgetsLastmodified(String widgetsLastmodified) {
		this.widgetsLastmodified = widgetsLastmodified;
	}

	@Column(name = "tabNumber")
	public Integer getTabNumber() {
		return this.tabNumber;
	}

	public void setTabNumber(Integer tabNumber) {
		this.tabNumber = tabNumber;
	}

	@Column(name = "deleteFlag", nullable = false)
	public int getDeleteFlag() {
		return this.deleteFlag;
	}

	public void setDeleteFlag(int deleteFlag) {
		this.deleteFlag = deleteFlag;
	}

	@Column(name = "temp", nullable = false)
	public boolean isTemp() {
		return this.temp;
	}

	public void setTemp(boolean temp) {
		this.temp = temp;
	}

	@Column(name = "workingUid", length = 150)
	public String getWorkingUid() {
		return this.workingUid;
	}

	public void setWorkingUid(String workingUid) {
		this.workingUid = workingUid;
	}


	private String staticPanel;
	private String dynamicPanel;
	private JSONObject staticPanelJson;
	private JSONObject dynamicPanelJson;
	private String tabName;
	private String columnsWidth;
	private String numCol;

	public void setWidgets(String widgets) throws RuntimeException{
		this.widgets = widgets;
		
		try{
			//TODO: It can be regular expression
			DocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
			Document widgetsDoc = docBuilder.parse(new InputSource(new StringReader(getWidgets())));
			Element widgetsEl = widgetsDoc.getDocumentElement();
			this.tabName = widgetsEl.getAttribute("tabName");
			this.columnsWidth = widgetsEl.getAttribute("columnsWidth");
			this.numCol = widgetsEl.getAttribute("numCol");
			NodeList panels = widgetsEl.getElementsByTagName("panel");
			Element staticPanel =(Element)panels.item(0);
			if("StaticPanel".equals(staticPanel.getAttribute("type"))){
				NodeList list = staticPanel.getElementsByTagName("widget");
				this.staticPanel = getNodeListString(list);
				this.staticPanelJson = getPanelJson(list);
			}
			if(panels.getLength() > 1){
				Element daynamicPanel =(Element)panels.item(1);
				if("DynamicPanel".equals(daynamicPanel.getAttribute("type"))){
					NodeList list = daynamicPanel.getElementsByTagName("widget");
					this.dynamicPanel = getNodeListString(list);
					this.dynamicPanelJson = getPanelJson(list);
				}
			}
		}catch(Exception e){
			throw new RuntimeException(e);
		}
	}
	
	@Transient
	private String getNodeListString(NodeList list) throws TransformerFactoryConfigurationError, TransformerException{
		StringBuffer sb = new StringBuffer();
		for(int i=0;i<list.getLength();i++){
			Node widget = list.item(i);
			StringWriter buf = new StringWriter();
			Transformer tf = TransformerFactory.newInstance().newTransformer();
			tf.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
			tf.transform(new DOMSource(widget), new StreamResult(buf));
			
			sb.append(buf + "\n");
		}
		
		return sb.toString();
	}
	
	@Transient
	private JSONObject getPanelJson(NodeList widgetsList) throws JSONException {
		JSONObject panelJson = new JSONObject();
		for (int i = 0; i < widgetsList.getLength(); i++) {
			if (widgetsList.item(i).getNodeType() != Node.ELEMENT_NODE)
				continue;
			JSONObject widgetJson = new JSONObject();
			Element widget = (Element) widgetsList.item(i);
			String id = widget.getAttribute("id");
			if (id != null)
				widgetJson.put("id", id);
			String href = widget.getAttribute("href");
			if (href != null)
				widgetJson.put("href", href);
			String title = widget.getAttribute("title");
			if (title != null)
				widgetJson.put("title", title);
			String type = widget.getAttribute("type");
			if (type != null)
				widgetJson.put("type", type);
			String column = widget.getAttribute("column");
			if (column != null)
				widgetJson.put("column", column);
			String ignoreHeader = widget.getAttribute("ignoreHeader");
			if (ignoreHeader != null)
				widgetJson.put("ignoreHeader", new Boolean(ignoreHeader)
						.booleanValue());

			String disabled = widget.getAttribute("disabled");
			if (disabled != null)
				widgetJson.put("disabled", new Boolean(disabled)
						.booleanValue());
			
			
			NodeList propertiesList = widget
					.getElementsByTagName("property");
			JSONObject propertyJson = new JSONObject();
			for (int j = 0; j < propertiesList.getLength(); j++) {
				if (propertiesList.item(j).getNodeType() != Node.ELEMENT_NODE)
					continue;
				Element property = (Element) propertiesList.item(j);
				String name = property.getAttribute("name");
				
				String value = "";
				if(property.getFirstChild() != null){
					value = property.getFirstChild().getNodeValue();
				}
				propertyJson.put(name, value);
			}
			widgetJson.put("properties", propertyJson);
			panelJson.put(id, widgetJson);
		}
		
		return panelJson;
	}
	
	@Transient
	public String getStaticPanel(){
		return this.staticPanel;
	}
	@Transient
	public JSONObject getStaticPanelJson(){
		return this.staticPanelJson;
	}
	
	@Transient
	public JSONObject getStaticPanelJsonWithComment() throws Exception {
		DocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
		Document widgetsDoc = docBuilder.parse(new InputSource(new StringReader(getWidgets())));
		Element widgetsEl = widgetsDoc.getDocumentElement();
		NodeList panels = widgetsEl.getElementsByTagName("panel");
		Element staticPanel =(Element)panels.item(0);
		if("StaticPanel".equals(staticPanel.getAttribute("type"))){
			
			NodeList staticWidgetlist = staticPanel.getChildNodes();
			
			int nodeCount = staticWidgetlist.getLength();
			Comment c;
			String nodeStr;
			Document commentDoc;
			Node commentNode;
			for (int i = 0; i < nodeCount; i++) {
				Node node = staticWidgetlist.item(i);
				if(node.getNodeType() == Element.COMMENT_NODE){
					c = (Comment)node;
					nodeStr = "<" + c.getNodeValue().trim() + ">";
					commentDoc = docBuilder.parse(new InputSource(new StringReader(nodeStr)));
					commentDoc.getDocumentElement().setAttribute("disabled", "true");
					commentNode = staticPanel.getOwnerDocument().importNode(commentDoc.getDocumentElement(), true);
					staticPanel.appendChild(commentNode);
				}
			}
			
			NodeList list = staticPanel.getElementsByTagName("widget");
			return getPanelJson(list);
		}
		return null;
	}
	
	@Transient
	public String getDynamicPanel(){
		return this.dynamicPanel;
	}
	@Transient
	public JSONObject getDynamicPanelJson(){
		return this.dynamicPanelJson;
	}
	
	@Transient
	public Element getElement() throws SAXException {
		Document doc = (Document) XmlUtil.string2Dom(getWidgets());
		return doc.getDocumentElement();
	}

	public void setElement(Element conf) {
		setWidgets(XmlUtil.dom2String(conf));
	}
	@Transient
	public String getTabName() {
		return tabName;
	}

	@Transient
	public String getColumnsWidth() {
		return columnsWidth;
	}
	
	@Transient
	public String getNumCol() {
		return numCol;
	}
	

	public Tab toTab(String uid){
		String tabId = getTabId();
		Tab tab = new Tab(uid, tabId);
		tab.setDefaultUid(getDefaultUid());
		tab.setWidgetLastModified(getWidgetsLastmodified());
		tab.setOrder(getTabNumber());
		tab.setName( this.getTabName());
		tab.setType("static");
		tab.setProperty("numCol", this.getNumCol());
		
		return tab;
	}
	@Transient
	public Collection getDynamicPanelXmlWidgets( String uid ) throws Exception {
		return getPanelXmlWidgets(uid, getTabId(), getDynamicPanel(), false);
	}
	@Transient
	public Collection getStaticPanelXmlWidgets(String uid) throws Exception {
		return getPanelXmlWidgets(uid, getTabId(), getStaticPanel(), true);
	}
	@Transient
	private Collection getPanelXmlWidgets(String uid, String tabId,
			String panelXml, boolean isStatic) throws Exception {
		TransformerFactory factory = TransformerFactory.newInstance();
		Transformer transformer;
		
		Collection widgetList = new ArrayList();
		if (log.isDebugEnabled())
			log.debug("--"
					+ Thread.currentThread().getContextClassLoader());
		InputStream xsl = Thread.currentThread().getContextClassLoader().getResourceAsStream("widget_xml2object.xsl");
		transformer = factory.newTransformer(new StreamSource(xsl));
		
		DOMResult result = new DOMResult();
		transformer.transform(new StreamSource(new StringReader("<widgets>" + panelXml + "</widgets>")),
				result);
		
		//Store widgets at the end of each line
		Map siblingMap = new HashMap();
		
		Document widgets = (Document)result.getNode();
		NodeList widgetNodeList = widgets.getElementsByTagName("widget");
		for(int i = 0; i < widgetNodeList.getLength(); i++){
			Element widgetEl = (Element)widgetNodeList.item(i);
			Widget widget = new Widget();
			widget.setTabId( tabId );
			widget.setDeleteDate(new Long(0));
			widget.setWidgetId(widgetEl.getAttribute("widgetId"));
			widget.setUid( uid );
			//widget.setWidgetId(widgetEl.getAttribute("widgetId"));
			widget.setType(widgetEl.getAttribute("type"));
			String column = widgetEl.getAttribute("colnum");
			if(column != null || !"".equals(column)){
				try{
					widget.setColumn(Integer.valueOf(widgetEl.getAttribute("colnum")));
				}catch(NumberFormatException e){
					widget.setColumn(new Integer(0));
				}
			}
			if(isStatic){
				widget.setSiblingId(widgetEl.getAttribute("siblingId"));
			}else{
				String siblingId = (String)siblingMap.get(widget.getColumn());
				if(siblingId != null){
					widget.setSiblingId(siblingId);
				}
				siblingMap.put(widget.getColumn(), widget.getWidgetId());
			}
			widget.setMenuId(isStatic ? "" : widget.getWidgetId().substring(2));
			widget.setParentId(widgetEl.getAttribute("parentId"));
			widget.setTitle(widgetEl.getAttribute("title"));
			widget.setHref(widgetEl.getAttribute("href"));
			widget.setIgnoreHeader(new Boolean(widgetEl
					.getAttribute("ignoreHeader")).booleanValue());
			Element data = (Element)widgetEl.getElementsByTagName("data").item(0);
			NodeList propertyNodes = data.getElementsByTagName("property");
			for(int k = 0; k < propertyNodes.getLength(); k++){
				Element propEl = (Element)propertyNodes.item(k);
				
				widget.setUserPref( propEl.getAttribute("name"),getText(propEl) );
			}
			
			if(isStatic){
				widget.setIsStatic(new Integer(1));
			}else{
				widget.setIsStatic(new Integer(0));
			}
			
			widgetList.add( widget );
		}
		
		return widgetList;
	}
	
	private String getText(Element element) {
		StringBuffer text = new StringBuffer();
		NodeList childNodes = element.getChildNodes();
		for (int i = 0; i < childNodes.getLength(); i++) {
			Node child = childNodes.item(i);
			text.append(child.getNodeValue());
		}
		return text.toString();
	}
}
