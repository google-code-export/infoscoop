package org.infoscoop.dao.model;

// Generated 2010/03/29 15:54:59 by Hibernate Tools 3.3.0.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.infoscoop.util.I18NUtil;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * IsTabs generated by hbm2java
 */
@Entity
@Table(name = "is_tabs", uniqueConstraints = @UniqueConstraint(columnNames = {
		"UID", "tabId" }))
public class Tab implements java.io.Serializable {

	private Integer id;
	private String uid;
	private String defaultUid;
	private String tabId;
	private String name;
	private Integer order;
	private String type;
	private String data;
	private String widgetLastModified;

	public Tab() {
	}

	public Tab(String uid, String tabId) {
		this.uid = uid;
		this.tabId = tabId;
	}

	public Tab(String uid, String defaultUid, String tabId, String name,
			Integer order, String type, String data, String widgetLastModified) {
		this.uid = uid;
		this.defaultUid = defaultUid;
		this.tabId = tabId;
		this.name = name;
		this.order = order;
		this.type = type;
		this.data = data;
		this.widgetLastModified = widgetLastModified;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "UID", nullable = false, length = 150)
	public String getUid() {
		return this.uid;
	}

	public void setUid(String uid) {
		this.uid = uid;
	}

	@Column(name = "defaultUid", length = 150)
	public String getDefaultUid() {
		return this.defaultUid;
	}

	public void setDefaultUid(String defaultUid) {
		this.defaultUid = defaultUid;
	}

	@Column(name = "tabId", nullable = false, length = 32)
	public String getTabId() {
		return this.tabId;
	}

	public void setTabId(String tabId) {
		this.tabId = tabId;
	}

	@Column(name = "name", length = 256)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "ORDER")
	public Integer getOrder() {
		return this.order;
	}

	public void setOrder(Integer order) {
		this.order = order;
	}

	@Column(name = "type", length = 128)
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Column(name = "data", length = 65535)
	public String getData() {
		return this.data;
	}

	public void setData(String data) {
		this.data = data;
	}

	@Column(name = "widgetLastModified", length = 32)
	public String getWidgetLastModified() {
		return this.widgetLastModified;
	}

	public void setWidgetLastModified(String widgetLastModified) {
		this.widgetLastModified = widgetLastModified;
	}

	
	public void setProperty(String field, String value) {
		try {
			String data = getData();
			if( data == null )
				data = "{}";
			
			JSONObject json = new JSONObject( data );
			json.put(field, value);
			setData(json.toString());
		} catch (JSONException e) {
			throw new RuntimeException(e);
		}
	}

	@Transient
	public JSONObject getProperties(){
		try {
			return new JSONObject(getData());
		} catch (JSONException e) {
			throw new RuntimeException(e);
		}
	}
	
	public JSONObject toJSONObject( Collection dynamicWidgets,Collection staticWidgets ) throws JSONException {
		return toJSONObject( dynamicWidgets,staticWidgets,new HashMap() );
	}
	
	public JSONObject toJSONObject( 
			Collection dynamicWidgets,Collection staticWidgets,Map resMap ) throws JSONException{
		JSONObject json = new JSONObject();
		json.put("uid", getUid());
		json.put("defaultUid", this.getDefaultUid());
		json.put("tabId", getTabId());
		json.put("tabName",I18NUtil.replace( this.getName(), resMap ) );
//		json.put("tabNumber", this.tabNumber);
		// Usual logic is affected if the type of variable is number
		json.put("tabNumber", this.getOrder() != null ?
				String.valueOf(this.getOrder()) : "");
		json.put("tabType", this.getType());
		json.put("widgetLastModified", this.getWidgetLastModified());
		json.put("property", getProperties());

		JSONObject staticPanel = new JSONObject();
		for(Iterator it = staticWidgets.iterator(); it.hasNext(); ){
			Widget widget = (Widget)it.next();
			staticPanel.put(widget.getWidgetId(), widget.toJSONObject());
		}
		json.put("staticPanel", staticPanel);
		
		JSONObject dynamicPanel = new JSONObject();
		for(Iterator it = dynamicWidgets.iterator(); it.hasNext(); ){
			Widget widget = (Widget)it.next();
			dynamicPanel.put(widget.getWidgetId(), widget.toJSONObject());
		}
		json.put("dynamicPanel", dynamicPanel);
		
		return json;
	}
}
